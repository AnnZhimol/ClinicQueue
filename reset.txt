commit 1025e69b1f3f9664e4fceca18fab9ead17bdb2a5
Merge: d6ea007 70c7bb3 978d111
Author: ankav <ankavanka731@gmail.com>
Date:   Mon Nov 25 18:20:04 2024 +0400

    On TestModule: Извлечение DoctorModule
    
    Прятание незафиксированных изменений перед выполнением извлечения "DoctorModule". Извлеките или примените эти изменения, чтобы восстановить их.

diff --cc ClinicQueueView/AuthorizationPatient.xaml
index fc86594,fc86594,0000000..3e58dbf
mode 100644,100644,000000..100644
--- a/ClinicQueueView/AuthorizationPatient.xaml
+++ b/ClinicQueueView/AuthorizationPatient.xaml
@@@@ -1,87 -1,87 -1,0 +1,87 @@@@
  +﻿<Window x:Class="ClinicQueueView.AuthorizationPatient"
  +        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  +        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  +        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  +        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  +        xmlns:local="clr-namespace:ClinicQueueView"
  +        mc:Ignorable="d"
  +        Title="AuthorizationPatient" Height="600" Width="800">
  +    <Window.Resources>
  +        <Style TargetType="TextBox">
  +            <Setter Property="Background" Value="White"/>
  +            <Setter Property="Foreground" Value="Gray"/>
  +            <Setter Property="BorderBrush" Value="#81D4FA"/>
  +            <Setter Property="BorderThickness" Value="2"/>
  +            <Setter Property="Margin" Value="10"/>
  +            <Setter Property="Padding" Value="5"/>
  +            <Setter Property="Height" Value="35"/>
  +            <Setter Property="FontSize" Value="14"/>
  +        </Style>
  +
  +        <Style TargetType="PasswordBox">
  +            <Setter Property="Background" Value="White"/>
  +            <Setter Property="Foreground" Value="Gray"/>
  +            <Setter Property="BorderBrush" Value="#81D4FA"/>
  +            <Setter Property="BorderThickness" Value="2"/>
  +            <Setter Property="Margin" Value="10"/>
  +            <Setter Property="Padding" Value="5"/>
  +            <Setter Property="Height" Value="35"/>
  +            <Setter Property="FontSize" Value="14"/>
  +        </Style>
  +
  +        <Style TargetType="ComboBox">
  +            <Setter Property="Background" Value="White"/>
  +            <Setter Property="Foreground" Value="Gray"/>
  +            <Setter Property="BorderBrush" Value="#81D4FA"/>
  +            <Setter Property="BorderThickness" Value="2"/>
  +            <Setter Property="Margin" Value="10"/>
  +            <Setter Property="Height" Value="30"/>
  +            <Setter Property="FontSize" Value="14"/>
  +        </Style>
  +
  +        <Style TargetType="Button">
  +            <Setter Property="Background" Value="#03A9F4"/>
  +            <Setter Property="Foreground" Value="White"/>
  +            <Setter Property="FontSize" Value="14"/>
  +            <Setter Property="Margin" Value="10"/>
  +            <Setter Property="Padding" Value="10,5"/>
  +            <Setter Property="BorderBrush" Value="#0288D1"/>
  +            <Setter Property="BorderThickness" Value="1"/>
  +            <Setter Property="Cursor" Value="Hand"/>
  +            <Setter Property="Height" Value="40"/>
  +            <Setter Property="Width" Value="200"/>
  +        </Style>
  +
  +        <Style TargetType="Window">
  +            <Setter Property="Foreground" Value="#0277BD"/>
  +            <Setter Property="FontSize" Value="16"/>
  +        </Style>
  +    </Window.Resources>
  +    <Grid>
  +        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
  +            <TextBlock Text="Введите свои данные:" HorizontalAlignment="Center" FontSize="20" FontWeight="Bold" Foreground="#0277BD" Margin="0,0,0,0"/>
  +            
  +            <Label Content="Фамилия:" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="5,0,0,0"/>
  +            <TextBox Name="LastNameTextBox" VerticalAlignment="Top" HorizontalAlignment="Left" Width="200" Tag="Введите фамилию" Text="Введите фамилию" GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus"/>
  +
  +            <Label Content="Имя:" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="5,0,0,0" />
  +            <TextBox Name="FirstNameTextBox" VerticalAlignment="Top" HorizontalAlignment="Left" Width="200" Tag="Введите имя" Text="Введите имя" GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus"/>
  +
  +            <Label Content="Отчество:" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="5,0,0,0"/>
  +            <TextBox Name="MiddleNameTextBox" VerticalAlignment="Top" HorizontalAlignment="Left" Width="200" Tag="Введите отчество" Text="Введите отчество" GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus"/>
  +
  +            <Label Content="Тип документа:" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="5,0,0,0"/>
  +            <ComboBox Name="DocumentTypeComboBox" VerticalAlignment="Top" HorizontalAlignment="Left" Width="200">
  +                <ComboBoxItem Content="Выберите тип документа" IsSelected ="True"/>
  +                <ComboBoxItem Content="ОМС" />
  +                <ComboBoxItem Content="Паспорт РФ" />
  +            </ComboBox>
  +
  +            <Label Content="Номер документа:" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="5,0,0,0" />
  +            <TextBox Name="DocumentNumberTextBox" VerticalAlignment="Top" HorizontalAlignment="Left" Width="200" Tag="Введите номер документа" Text="Введите номер документа" GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus"/>
  +
--             <Button Content="Войти" VerticalAlignment="Top" HorizontalAlignment="Center" Width="200" Margin="5,10,0,0" Click="LoginButton_Click" />
+++            <Button Name="EntryButton" Content="Войти" VerticalAlignment="Top" HorizontalAlignment="Center" Width="200" Margin="5,10,0,0" Click="LoginButton_Click" />
  +            <Button Content="Отмена" VerticalAlignment="Top" HorizontalAlignment="Center" Width="200" Margin="5,10,0,0" Click="LogOutButton_Click" />
  +        </StackPanel>
  +    </Grid>
  +</Window>
diff --cc ClinicQueueView/EditDoctorWindow.xaml.cs
index d648896,d648896,0000000..49e04fc
mode 100644,100644,000000..100644
--- a/ClinicQueueView/EditDoctorWindow.xaml.cs
+++ b/ClinicQueueView/EditDoctorWindow.xaml.cs
@@@@ -1,90 -1,90 -1,0 +1,92 @@@@
  +﻿using ClinicQueueContracts.BindingModels;
  +using ClinicQueueContracts.BusinessLogicContracts;
  +using ClinicQueueContracts.ViewModels;
  +using ClinicQueueDataModels.Enums;
  +using System.Text.RegularExpressions;
  +using System.Windows;
  +using System.Windows.Controls;
  +
  +namespace ClinicQueueView
  +{
  +    public partial class EditDoctorWindow : Window
  +    {
  +        private readonly DoctorViewModel _doctor;
  +        private readonly IDoctorLogic _doctorLogic;
  +
  +        public EditDoctorWindow(IDoctorLogic doctorLogic, DoctorViewModel doctor)
  +        {
  +            InitializeComponent();
  +            _doctorLogic = doctorLogic;
  +            _doctor = doctor;
  +            SpecializationComboBox.ItemsSource = Enum.GetValues(typeof(Specialization));
  +            RoomNumberComboBox.ItemsSource = Enum.GetValues(typeof(RoomNumber));
  +            LoadDoctorData();
  +        }
  +
  +        private void LoadDoctorData()
  +        {
  +            FirstNameTextBox.Text = _doctor.Name;
  +            LastNameTextBox.Text = _doctor.Surname;
  +            MiddleNameTextBox.Text = _doctor.Patronymic;
  +            SpecializationComboBox.SelectedItem = Enum.Parse(typeof(Specialization), _doctor.Specialization.ToString());
  +            RoomNumberComboBox.SelectedItem = Enum.Parse(typeof(RoomNumber), _doctor.CabinetNumber.ToString());
  +            PasswordBox.Password = _doctor.Password;
  +        }
  +
  +        private void CancelButton_Click(object sender, RoutedEventArgs e)
  +        {
  +            this.Close();
  +        }
  +
  +        private void SaveDoctorButton_Click(object sender, RoutedEventArgs e)
  +        {
  +            var result = MessageBox.Show($"Вы уверены, что хотите изменить данные?", "Подтверждение изменения", MessageBoxButton.YesNo, MessageBoxImage.Question);
  +            if (!Regex.IsMatch(PasswordBox.Password, @"^^((\w+\d+\W+)|(\w+\W+\d+)|(\d+\w+\W+)|(\d+\W+\w+)|(\W+\w+\d+)|(\W+\d+\w+))[\w\d\W]*$", RegexOptions.IgnoreCase))
  +            {
  +                MessageBox.Show("Пароль должен содержать латинские буквы, цифры и спец. символы.", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Warning);
  +                return;
  +            }
  +            if (RoomNumberComboBox.SelectedItem == null)
  +            {
  +                MessageBox.Show("Пожалуйста, выберите кабинет.", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Warning);
  +                return;
  +            }
  +            if (SpecializationComboBox.SelectedItem == null)
  +            {
  +                MessageBox.Show("Пожалуйста, выберите специализацию.", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Warning);
  +                return;
  +            }
  +            if (string.IsNullOrEmpty(FirstNameTextBox.Text) || string.IsNullOrEmpty(LastNameTextBox.Text) || string.IsNullOrEmpty(PasswordBox.Password) || ((RoomNumber)RoomNumberComboBox.SelectedItem).ToString() == "Нет" || ((Specialization)SpecializationComboBox.SelectedItem).ToString() == "Нет")
  +            {
  +                MessageBox.Show("Пожалуйста, заполните все поля.", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Warning);
  +                return;
  +            }
  +
--             if (string.IsNullOrEmpty(MiddleNameTextBox.Text) || MiddleNameTextBox.Text == "Введите отчество")
+++            string? middleName = MiddleNameTextBox.Text;
+++
+++            if (string.IsNullOrEmpty(middleName) || middleName == "Введите отчество")
  +            {
--                 MiddleNameTextBox.Text = null;
+++                middleName = null;
  +            }
  +
  +            if (result == MessageBoxResult.Yes)
  +            {
  +                var updatedDoctor = new DoctorBindingModel
  +                {
  +                    Id = _doctor.Id,
  +                    Name = FirstNameTextBox.Text,
  +                    Surname = LastNameTextBox.Text,
--                     Patronymic = MiddleNameTextBox.Text,
+++                    Patronymic = middleName,
  +                    Password = PasswordBox.Password,
  +                    Specialization = ((Specialization)SpecializationComboBox.SelectedItem).ToString(),
  +                    CabinetNumber = ((RoomNumber)RoomNumberComboBox.SelectedItem).ToString()
  +                };
  +
  +                _doctorLogic.Update(updatedDoctor);
  +
  +                MessageBox.Show("Изменения успешно сохранены.", "Успех", MessageBoxButton.OK, MessageBoxImage.Information);
  +                DialogResult = true;
  +            }
  +        }
  +    }
  +}
diff --cc ClinicQueueView/PatientMainWindow.xaml
index 71f3605,71f3605,0000000..8304604
mode 100644,100644,000000..100644
--- a/ClinicQueueView/PatientMainWindow.xaml
+++ b/ClinicQueueView/PatientMainWindow.xaml
@@@@ -1,68 -1,68 -1,0 +1,68 @@@@
  +﻿<Window x:Class="ClinicQueueView.PatientMainWindow"
  +        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  +        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  +        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  +        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  +        xmlns:local="clr-namespace:ClinicQueueView"
  +        mc:Ignorable="d"
  +        Title="PatientMainWindow" Height="450" Width="800">
  +    <Window.Resources>
  +        <Style TargetType="TextBox">
  +            <Setter Property="Background" Value="White"/>
  +            <Setter Property="Foreground" Value="Gray"/>
  +            <Setter Property="BorderBrush" Value="#81D4FA"/>
  +            <Setter Property="BorderThickness" Value="2"/>
  +            <Setter Property="Margin" Value="10"/>
  +            <Setter Property="Padding" Value="5"/>
  +            <Setter Property="Height" Value="35"/>
  +            <Setter Property="FontSize" Value="14"/>
  +        </Style>
  +
  +        <Style TargetType="PasswordBox">
  +            <Setter Property="Background" Value="White"/>
  +            <Setter Property="Foreground" Value="Gray"/>
  +            <Setter Property="BorderBrush" Value="#81D4FA"/>
  +            <Setter Property="BorderThickness" Value="2"/>
  +            <Setter Property="Margin" Value="10"/>
  +            <Setter Property="Padding" Value="5"/>
  +            <Setter Property="Height" Value="35"/>
  +            <Setter Property="FontSize" Value="14"/>
  +        </Style>
  +
  +        <Style TargetType="ComboBox">
  +            <Setter Property="Background" Value="White"/>
  +            <Setter Property="Foreground" Value="Gray"/>
  +            <Setter Property="BorderBrush" Value="#81D4FA"/>
  +            <Setter Property="BorderThickness" Value="2"/>
  +            <Setter Property="Margin" Value="10"/>
  +            <Setter Property="Height" Value="30"/>
  +            <Setter Property="FontSize" Value="14"/>
  +        </Style>
  +
  +        <Style TargetType="Button">
  +            <Setter Property="Background" Value="#03A9F4"/>
  +            <Setter Property="Foreground" Value="White"/>
  +            <Setter Property="FontSize" Value="14"/>
  +            <Setter Property="Margin" Value="10"/>
  +            <Setter Property="Padding" Value="10,5"/>
  +            <Setter Property="BorderBrush" Value="#0288D1"/>
  +            <Setter Property="BorderThickness" Value="1"/>
  +            <Setter Property="Cursor" Value="Hand"/>
  +            <Setter Property="Height" Value="40"/>
  +            <Setter Property="Width" Value="200"/>
  +        </Style>
  +
  +        <Style TargetType="Window">
  +            <Setter Property="Foreground" Value="#0277BD"/>
  +            <Setter Property="FontSize" Value="16"/>
  +        </Style>
  +    </Window.Resources>
  +    <Grid>
  +        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
--             <Button Content="Записаться на прием к врачу" Width="350" Click="ReserveButton_Click"/>
--             <Button Content="Зарегистрироваться в электронной очереди" Width="350" Click="RegisterButton_Click"/>
--             <Button Content="Выйти" Width="350" Click="LogOutButton_Click"/>
+++            <Button Name="ReserveButton" Content="Записаться на прием к врачу" Width="350" Click="ReserveButton_Click"/>
+++            <Button Name="RegisterButton" Content="Зарегистрироваться в электронной очереди" Width="350" Click="RegisterButton_Click"/>
+++            <Button Name="LogoutButton" Content="Выйти" Width="350" Click="LogOutButton_Click"/>
  +        </StackPanel>
  +
  +    </Grid>
  +</Window>
diff --cc ClinicQueueView/PatientWindow.xaml
index 0e00127,0e00127,0000000..51f979e
mode 100644,100644,000000..100644
--- a/ClinicQueueView/PatientWindow.xaml
+++ b/ClinicQueueView/PatientWindow.xaml
@@@@ -1,67 -1,67 -1,0 +1,67 @@@@
  +﻿<Window x:Class="ClinicQueueView.PatientWindow"
  +        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  +        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  +        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  +        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  +        xmlns:local="clr-namespace:ClinicQueueView"
  +        mc:Ignorable="d"
  +        Title="PatientWindow" Height="550" Width="800">
  +    <Window.Resources>
  +        <Style TargetType="TextBox">
  +            <Setter Property="Background" Value="White"/>
  +            <Setter Property="Foreground" Value="Gray"/>
  +            <Setter Property="BorderBrush" Value="#81D4FA"/>
  +            <Setter Property="BorderThickness" Value="2"/>
  +            <Setter Property="Margin" Value="10"/>
  +            <Setter Property="Padding" Value="5"/>
  +            <Setter Property="Height" Value="35"/>
  +            <Setter Property="FontSize" Value="14"/>
  +        </Style>
  +
  +        <Style TargetType="PasswordBox">
  +            <Setter Property="Background" Value="White"/>
  +            <Setter Property="Foreground" Value="Gray"/>
  +            <Setter Property="BorderBrush" Value="#81D4FA"/>
  +            <Setter Property="BorderThickness" Value="2"/>
  +            <Setter Property="Margin" Value="10"/>
  +            <Setter Property="Padding" Value="5"/>
  +            <Setter Property="Height" Value="35"/>
  +            <Setter Property="FontSize" Value="14"/>
  +        </Style>
  +
  +        <Style TargetType="ComboBox">
  +            <Setter Property="Background" Value="White"/>
  +            <Setter Property="Foreground" Value="Gray"/>
  +            <Setter Property="BorderBrush" Value="#81D4FA"/>
  +            <Setter Property="BorderThickness" Value="2"/>
  +            <Setter Property="Margin" Value="10"/>
  +            <Setter Property="Height" Value="30"/>
  +            <Setter Property="FontSize" Value="14"/>
  +        </Style>
  +
  +        <Style TargetType="Button">
  +            <Setter Property="Background" Value="#03A9F4"/>
  +            <Setter Property="Foreground" Value="White"/>
  +            <Setter Property="FontSize" Value="14"/>
  +            <Setter Property="Margin" Value="10"/>
  +            <Setter Property="Padding" Value="10,5"/>
  +            <Setter Property="BorderBrush" Value="#0288D1"/>
  +            <Setter Property="BorderThickness" Value="1"/>
  +            <Setter Property="Cursor" Value="Hand"/>
  +            <Setter Property="Height" Value="40"/>
  +            <Setter Property="Width" Value="200"/>
  +        </Style>
  +
  +        <Style TargetType="Window">
  +            <Setter Property="Foreground" Value="#0277BD"/>
  +            <Setter Property="FontSize" Value="16"/>
  +        </Style>
  +    </Window.Resources>
  +    <Grid>
  +        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
  +            <TextBlock Text="Электронная очередь" HorizontalAlignment="Center" FontSize="20" FontWeight="Bold" Foreground="#0277BD" Margin="0,0,0,0"/>
  +
--             <Button Content="Начать" Click="StartButton_Click"/>
+++            <Button Name="StartButton" Content="Начать" Click="StartButton_Click"/>
  +        </StackPanel>
  +    </Grid>
  +</Window>
diff --cc ClinicQueueView/ReserveWindow.xaml.cs
index e2f8d7f,e2f8d7f,0000000..57bc26e
mode 100644,100644,000000..100644
--- a/ClinicQueueView/ReserveWindow.xaml.cs
+++ b/ClinicQueueView/ReserveWindow.xaml.cs
@@@@ -1,278 -1,278 -1,0 +1,277 @@@@
  +﻿using ClinicQueueContracts.BindingModels;
  +using ClinicQueueContracts.BusinessLogicContracts;
  +using ClinicQueueContracts.SearchModels;
  +using ClinicQueueContracts.ViewModels;
  +using ClinicQueueDataModels.Enums;
  +using System.Drawing;
  +using System.Windows;
  +using System.Windows.Controls;
  +using static System.Net.Mime.MediaTypeNames;
  +using System.Windows.Media;
  +using System.Drawing.Printing;
  +using static System.Runtime.InteropServices.JavaScript.JSType;
  +using System.Windows.Threading;
  +using ClinicQueueBusinessLogic.BusinessLogic;
  +
  +namespace ClinicQueueView
  +{
  +    public partial class ReserveWindow : Window
  +    {
  +        private readonly IDoctorLogic _doctorLogic;
  +        private readonly IAppointmentLogic _appointmentLogic;
  +        private readonly IPatientLogic _patientLogic;
  +        private readonly PatientViewModel _patient;
  +        private string _printContent;
  +
  +        private readonly DispatcherTimer _inactivityTimer;
  +
  +        public ReserveWindow(IPatientLogic patientLogic,IDoctorLogic doctorLogic, IAppointmentLogic appointmentLogic, PatientViewModel patient)
  +        {
  +            _appointmentLogic = appointmentLogic;
  +            _doctorLogic = doctorLogic;
  +            _patient = patient;
  +            _patientLogic = patientLogic;
  +            InitializeComponent();
  +            SpecializationComboBox.ItemsSource = Enum.GetValues(typeof(Specialization));
  +            TimeSlotComboBox.SelectionChanged += OnTimeSlotSelected;
  +
  +            _inactivityTimer = new DispatcherTimer
  +            {
  +                Interval = TimeSpan.FromMinutes(1)
  +            };
  +            _inactivityTimer.Tick += OnInactivityTimeout;
  +            ResetInactivityTimer();
  +
  +            this.MouseMove += OnUserActivity;
  +            this.KeyDown += OnUserActivity;
  +        }
  +
  +        private void OnUserActivity(object sender, EventArgs e)
  +        {
  +            ResetInactivityTimer();
  +        }
  +
  +        private void ResetInactivityTimer()
  +        {
  +            _inactivityTimer.Stop();
  +            _inactivityTimer.Start();
  +        }
  +
  +        private void OnInactivityTimeout(object? sender, EventArgs e)
  +        {
  +            _inactivityTimer.Stop();
  +            PatientWindow patientWindow = new PatientWindow(_patientLogic, _doctorLogic, _appointmentLogic);
  +            patientWindow.Show();
  +            this.Close();
  +        }
  +
  +        private void OnSpecializationChanged(object sender, SelectionChangedEventArgs e)
  +        {
  +            DoctorComboBox.IsEnabled = false;
  +            AppointmentCalendar.SelectedDate = null;
  +            TimeSlotComboBox.ItemsSource = null;
  +            TimeSlotComboBox.IsEnabled = false;
  +            DoctorComboBox.ItemsSource = null;
  +
  +            if (SpecializationComboBox.SelectedItem != null)
  +            {
  +                var selectedSpecialization = ((Specialization)SpecializationComboBox.SelectedItem).ToString();
--                 if (selectedSpecialization == "Нет")
--                 {
--                     MessageBox.Show("Пожалуйста, выберите специализацию.", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Warning);
--                     return;
--                 }
  +
  +                var doctors = _doctorLogic.ReadList(new DoctorSearchModel
  +                {
  +                    Specialization = selectedSpecialization
  +                });
  +
  +                DoctorComboBox.ItemsSource = doctors;
  +                DoctorComboBox.IsEnabled = true;
  +            }
+++
  +            UpdateBookAppointmentButtonState();
  +        }
  +
  +        private void OnDoctorChanged(object sender, SelectionChangedEventArgs e)
  +        {
  +            AppointmentCalendar.SelectedDate = null;
  +            TimeSlotComboBox.ItemsSource = null;
  +            TimeSlotComboBox.IsEnabled = false;
  +
  +            if (DoctorComboBox.SelectedItem != null)
  +            {
  +                var selectedDoctor = (DoctorViewModel)DoctorComboBox.SelectedItem;
  +
  +                AppointmentCalendar.DisplayDateStart = DateTime.Today;
  +                AppointmentCalendar.DisplayDateEnd = DateTime.Today.AddMonths(1);
  +
  +                AppointmentCalendar.BlackoutDates.Clear();
  +
  +                var appointments = _appointmentLogic.ReadList(new AppointmentSearchModel
  +                {
  +                    DoctorId = selectedDoctor.Id
  +                }).Where(a => a.Status == AppointmentStatus.Создан).ToList();
  +
  +                var availableDates = appointments.Select(a => a.AppointmentStart.Date).Distinct().ToList();
  +                AppointmentCalendar.BlackoutDates.Add(new CalendarDateRange(DateTime.Today));
  +
  +                for (var date = DateTime.Today; date <= AppointmentCalendar.DisplayDateEnd; date = date.AddDays(1))
  +                {
  +                    if (!availableDates.Contains(date))
  +                    {
  +                        AppointmentCalendar.BlackoutDates.Add(new CalendarDateRange(date));
  +                    }
  +                }
  +            }
  +            UpdateBookAppointmentButtonState();
  +        }
  +
  +        private void OnDateChanged(object sender, SelectionChangedEventArgs e)
  +        {
  +            TimeSlotComboBox.IsEnabled = false;
  +            TimeSlotComboBox.ItemsSource = null;
  +
  +            if (DoctorComboBox.SelectedItem != null && AppointmentCalendar.SelectedDate.HasValue)
  +            {
  +                var selectedDoctor = (DoctorViewModel)DoctorComboBox.SelectedItem;
  +                var selectedDate = AppointmentCalendar.SelectedDate.Value.Date;
  +
  +                var appointments = _appointmentLogic.ReadList(new AppointmentSearchModel
  +                {
  +                    DoctorId = selectedDoctor.Id
  +                })
  +                .Where(a => a.AppointmentStart.Date == selectedDate && a.Status == AppointmentStatus.Создан)
  +                .OrderBy(a => a.AppointmentStart)
  +                .Select(a => a.AppointmentStart.ToLocalTime().ToString("HH:mm"))
  +                .ToList();
  +
  +                if (appointments.Any())
  +                {
  +                    TimeSlotComboBox.ItemsSource = appointments;
  +                    TimeSlotComboBox.IsEnabled = true;
  +                }
  +            }
  +            UpdateBookAppointmentButtonState();
  +        }
  +
  +        private void OnBookAppointmentClick(object sender, RoutedEventArgs e)
  +        {
  +            if (SpecializationComboBox.SelectedItem == null || DoctorComboBox.SelectedItem == null || AppointmentCalendar.SelectedDate == null || TimeSlotComboBox.SelectedItem == null)
  +            {
  +                MessageBox.Show("Пожалуйста, выберите специализацию, врача, дату и время приема.");
  +                return;
  +            }
  +
  +            string specialization = ((Specialization)SpecializationComboBox.SelectedItem).ToString();
  +            var doctor = (DoctorViewModel)DoctorComboBox.SelectedItem;
  +            DateTime appointmentDate = AppointmentCalendar.SelectedDate.Value.Date;
  +            string timeSlot = TimeSlotComboBox.SelectedItem.ToString();
  +
  +            DateTime localSelectedDateTime = DateTime.Parse($"{appointmentDate:yyyy-MM-dd} {timeSlot}");
  +
  +            DateTime utcSelectedDateTime = localSelectedDateTime.ToUniversalTime();
  +
  +            var appointment = _appointmentLogic.ReadList(new AppointmentSearchModel
  +            {
  +                DoctorId = doctor.Id
  +            })
  +            .FirstOrDefault(a => a.AppointmentStart == utcSelectedDateTime && a.Status == AppointmentStatus.Создан);
  +
  +            if (appointment != null)
  +            {
  +                var random = new Random();
  +                int reservationNumber = random.Next(100000, 999999);
  +                appointment.Status = AppointmentStatus.Забронирован;
  +                appointment.PatientId = _patient.Id;
  +                appointment.ReservationNumber = reservationNumber;
  +
  +                _appointmentLogic.Update(ConvertToBindingModel(appointment));
  +
  +                _printContent = $"Запись на прием успешна.\nЧтобы попасть на прием, необходимо\nзарегистрироваться в электронной очереди\n за 10 минут до начала приема. \nВ противном случае, прием будет отменен.\nДля регистрации потребуется номер брони.\n\n" +
  +                        $"Номер брони: {reservationNumber}\n" +
  +                        $"Специализация: {specialization}\n" +
  +                        $"Врач: {doctor.FullName}\n" +
  +                        $"Дата: {appointmentDate:dd.MM.yyyy}\n" +
  +                        $"Время: {timeSlot}";
  +
  +                MessageBox.Show(_printContent);
  +
  +                PrintReceipt();
  +                _inactivityTimer.Stop();
  +                PatientWindow patientWindow = new PatientWindow(_patientLogic, _doctorLogic, _appointmentLogic);
  +                patientWindow.Show();
  +                this.Close();
  +            }
  +            else
  +            {
  +                MessageBox.Show("Выбранное время уже занято или недоступно.");
  +            }
  +        }
  +
  +        private void PrintReceipt()
  +        {
  +            PrintDocument printDocument = new PrintDocument();
  +            printDocument.PrintPage += PrintDocument_PrintPage;
  +
  +            try
  +            {
  +                PrintDialog printDialog = new PrintDialog();
  +                if (printDialog.ShowDialog() == true)
  +                {
  +                    printDocument.Print();
  +                }
  +            }
  +            catch (Exception ex)
  +            {
  +                MessageBox.Show($"Ошибка печати: {ex.Message}");
  +            }
  +        }
  +
  +        private void PrintDocument_PrintPage(object sender, PrintPageEventArgs e)
  +        {
  +                e.Graphics.DrawString(
  +                _printContent,
  +                new System.Drawing.Font("Arial", 12),
  +                System.Drawing.Brushes.Black,
  +                new RectangleF(10, 10, e.PageBounds.Width - 20, e.PageBounds.Height - 20)
  +            );
  +        }
  +
  +        public AppointmentBindingModel ConvertToBindingModel(AppointmentViewModel appointmentViewModel)
  +        {
  +            if (appointmentViewModel == null)
  +            {
  +                throw new ArgumentNullException(nameof(appointmentViewModel));
  +            }
  +
  +            return new AppointmentBindingModel
  +            {
  +                Id = appointmentViewModel.Id,
  +                DoctorId = appointmentViewModel.DoctorId,
  +                AppointmentStart = appointmentViewModel.AppointmentStart,
  +                Status = appointmentViewModel.Status,
  +                PatientId = appointmentViewModel.PatientId,
  +                ReservationNumber = appointmentViewModel.ReservationNumber,
  +                ElectronicQueueId = appointmentViewModel.ElectronicQueueId
  +            };
  +        }
  +
  +        private void CancelButton_Click(object sender, RoutedEventArgs e)
  +        {
+++            _inactivityTimer.Stop();
+++            PatientWindow patientWindow = new PatientWindow(_patientLogic, _doctorLogic, _appointmentLogic);
+++            patientWindow.Show();
  +            this.Close();
  +        }
  +
  +        private void OnTimeSlotSelected(object sender, SelectionChangedEventArgs e)
  +        {
  +            UpdateBookAppointmentButtonState();
  +        }
  +
  +        private void UpdateBookAppointmentButtonState()
  +        {
  +            ReserveButton.IsEnabled = SpecializationComboBox.SelectedItem != null &&
  +                                              DoctorComboBox.SelectedItem != null &&
  +                                              AppointmentCalendar.SelectedDate != null &&
  +                                              TimeSlotComboBox.SelectedItem != null;
  +        }
  +    }
  +}
